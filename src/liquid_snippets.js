export const liquidSnippets = [
    {
        "title": "Expand menu items on hover",
        "tags": ["Shopify Development","JavaScript", "Dawn 12.0","Utilities", "Header","Shopify Theme Customization","Frontend Development"],
        "description": "## Making the dawn menu items expand on hover\r\n   \r\n0. **Optional Step (jQuery):** You might need to import jQuery if not on the theme files (e.g., `theme.liquid`).\r\n\r\n1. **Navigate to the Theme Files:** Go to your Shopify Admin, then click on \"Online Store\" and then \"Themes.\"\r\n\r\n2. **Edit the Theme:** Find the theme you want to edit and click on the \"Actions\" dropdown menu. Select \"Edit Code.\"\r\n\r\n3. **Open the theme.liquid File:** In the list of theme files on the left, locate and click on `theme.liquid` under the \"Layout\" section.\r\n\r\n4. **Insert Custom JavaScript:** Scroll to the bottom of the `theme.liquid` file and paste the following code just before the closing `<\/body>` tag:\r\n\r\n   ```html\r\n   <script>\r\n     $('header-menu').each(function() {\r\n       $(this).find('details summary').hover(function() {\r\n         $(this).click();\r\n       });\r\n       $(this).find('details summary + ul').hover(function() {\r\n         $(this).prev('summary').click();\r\n       });\r\n     });\r\n   <\/script>\r\n   ```\r\n\r\n5. **Update Menu Link:** Locate the code in your theme that looks like this:\r\n\r\n   ```html\r\n   <span class=\"{%- if link.child_active %}header__active-menu-item{% endif %} f_14 font_600\">\r\n     {{- link.title | escape -}}\r\n   <\/span>\r\n   ```\r\n\r\n   Replace it with:\r\n\r\n   ```html\r\n   <a href=\"{{ link.url }}\" class=\"clr_blck text-decoration {%- if link.child_active %}header__active-menu-item{% endif %} f_14 font_600\">\r\n     {{- link.title | escape -}}\r\n   <\/a>\r\n   ```\r\n\r\n6. **Save Changes:** Click the \"Save\" button to save your changes.\r\n\r\n7. **Optional Step:** If you want to make the element inside the summary clickable, add the following CSS to your theme's stylesheet:\r\n\r\n   ```css\r\n   details summary {\r\n     pointer-events: none;\r\n   }\r\n   details summary a {\r\n     pointer-events: auto;\r\n   }\r\n   ```\r\n\r\n9. **Publish the Theme:** Once you're done making changes, click on the \"Actions\" dropdown menu and select \"Publish.\""
    },
    {
        "title": "Fade loading for entire website",
        "tags": ["Shopify Development","CSS","Utilities","Any theme","Shopify Theme Customization","Frontend Development"],
        "description": "# First Load Fade Effect\r\n\r\nThis CSS snippet creates a smooth 2-second fade effect on the entire site during the first load. To implement this effect, follow the steps below.\r\n\r\n## Instructions\r\n\r\n1. Open the base stylesheet of your theme (typically named `base.css` or `styles.css`).\r\n2. Copy the provided CSS code.\r\n3. Paste the code at the start of the `base.css` file.\r\n\r\n### CSS Code\r\n\r\n```css\r\n\/* \u0295\u2022\u1D25\u2022\u0294\r\n   Fade effect on first load\r\n*\/\r\n\r\nbody {\r\n  opacity: 0;\r\n  animation: fade-in 1.5s forwards;\r\n}\r\n\r\n@keyframes fade-in {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}"
    },
    {
        "title": "Implement Hex Color Filters in Shopify Using jQuery and CSS",
        "tags": ["Shopify Development","jQuery","CSS","Utilities","JavaScript","Shopify Theme Customization","Frontend Development"],
        "description": "# Hex Color Filter Implementation\r\n\r\nThis guide will help you implement a feature that turns filter elements into their corresponding hex colors using jQuery and CSS for a search and discovery app. This feature relies on the filter name, so ensure you update the `filter_name` variable in the `color_filter_helper.js` file if the filter name changes.\r\n\r\n## Steps to Implement\r\n\r\n### 1. Create a Filter Group\r\n\r\n1. Open the Search and Discovery app in your Shopify store.\r\n2. Create a new filter group that is variant metafield-based. (The variant metafield should be created beforehand) \r\n3. Name this filter group (e.g., \"Variant Color\") as an identifier for the color filter.\r\n\r\n### 2. Add JavaScript\r\n\r\n1. In the `assets` folder of your Shopify theme, create a new file named `color-filter-helper.js`.\r\n2. Copy and paste the following code into `color-filter-helper.js`:\r\n\r\n    ```javascript\r\n    \/\/ Name of the filter element for the selector\r\n    const filter_name = '[data-variant-color-filters]';\r\n    \/\/ Color names and their hex values\r\n    const colors = [\r\n      {\r\n        key: \"black\",\r\n        value: \"#000\",\r\n      },\r\n      {\r\n        key: \"fde\",\r\n        value: \"#877348\",\r\n      },\r\n      {\r\n        key: \"clear\",\r\n        value: \"#FFFFFF\",\r\n      },\r\n      {\r\n        key: \"gray\",\r\n        value: \"#DADADA\",\r\n      }\r\n    ];\r\n\r\n    function ___initFilters() {\r\n      $(`${filter_name}`).addClass('variant-colors');\r\n    }\r\n\r\n    function renderColors() {\r\n      $(`${filter_name} .facet-checkbox__text`).each(function () {\r\n        const searchKey = $(this)\r\n          .find(\".facet-checkbox__text-label\")\r\n          .text()\r\n          .toLowerCase();\r\n        const colorObject = colors.find(\r\n          (color) => color.key.toLowerCase() === searchKey\r\n        );\r\n        const value = colorObject ? colorObject.value : undefined;\r\n\r\n        $(this).css(\"background-color\", value);\r\n      });\r\n    }\r\n\r\n    function attachClickEvents() {\r\n      $(`${filter_name}`).on(\"click\", \".facets__item\", function () {\r\n        renderColors();\r\n      });\r\n    }\r\n\r\n    function initializeObserver() {\r\n      const filterContainer = document.querySelector(\r\n        `${filter_name}`\r\n      );\r\n      const observer = new MutationObserver((mutations) => {\r\n        mutations.forEach((mutation) => {\r\n          if (mutation.type === \"childList\") {\r\n            renderColors();\r\n          }\r\n        });\r\n      });\r\n\r\n      const config = { childList: true, subtree: true };\r\n      observer.observe(filterContainer, config);\r\n    }\r\n\r\n    $(document).ready(function () {\r\n      ___initFilters();\r\n      initializeObserver();\r\n      attachClickEvents();\r\n      renderColors();\r\n    });\r\n    ```\r\n\r\n### 3. Add CSS\r\n\r\n1. In the `assets` folder, create a new file named `component-color-filter.css`.\r\n2. Add the following CSS code:\r\n\r\n    ```css\r\n    .variant-colors .facets-layout.facets-layout-list.facets-layout-list--text.facets__list--vertical.list-unstyled {\r\n      display: flex;\r\n    }\r\n    .variant-colors .facet-checkbox__text {\r\n      position: absolute;\r\n      width: 20px;\r\n      height: 20px;\r\n      overflow: hidden;\r\n      border: 1px solid #7c7c7c;\r\n      border-radius: 100%;\r\n    }\r\n    .variant-colors .facets-layout.facets-layout-list.facets-layout-list--text.facets__list--vertical.list-unstyled svg {\r\n        opacity: 0;\r\n    }\r\n    .variant-colors .icon-checkmark {\r\n      display: none;\r\n    }\r\n    .variant-colors .facet-checkbox__text,\r\n    #FacetFiltersForm .facets__disclosure-vertical.variant-colors ul.facets-layout span.facet-checkbox__text span.facet-checkbox__text-label {\r\n      font-size: 0;\r\n      color: transparent;\r\n    }\r\n    .variant-colors .active .facet-checkbox__text:after {\r\n      content: \"\";\r\n      border-bottom: 1px solid #ddd;\r\n      background: #ddd;\r\n      mix-blend-mode: hard-light;\r\n      position: absolute;\r\n      left: 0;\r\n      right: -10px;\r\n      top: -4px;\r\n      bottom: 0;\r\n      opacity: 0;\r\n      height: 80%;\r\n      transform: rotate(45deg);\r\n    }\r\n    ```\r\n\r\n### 4. Update the Facets Snippet\r\n\r\n1. Locate the `facets` snippet in your theme.\r\n2. At the end of the snippet, add the following lines to import the JavaScript and CSS files:\r\n\r\n    ```liquid\r\n    {% comment %}\r\n      \u0295\u2022\u1D25\u2022\u0294\r\n      Render the color filter components\r\n    {% endcomment %}\r\n    {{ 'component-color-filter.css' | asset_url | stylesheet_tag }}\r\n    <script src=\"{{ 'color-filter-helper.js' | asset_url }}\" defer><\/script>\r\n    ```\r\n\r\n### 5. Add the Data Attribute\r\n\r\n1. Find the `details` element in your theme that corresponds to the collapsible filter container.\r\n2. Modify the element to include the `data-filter-name` attribute like this:\r\n\r\n    ```liquid\r\n    {% case filter.type %}\r\n      {% when 'boolean', 'list' %}\r\n        <details\r\n          id=\"Details-{{ filter.param_name | escape }}-{{ section.id }}\"\r\n          data-{{ filter.label | handle }}-filters\r\n          class=\"{% if filter_type == 'horizontal' %}disclosure-has-popup facets__disclosure{% else %} facets__disclosure-vertical{% endif %} js-filter\"\r\n          data-index=\"{{ forloop.index }}\"\r\n          {% if filter_type == 'vertical'  %}\r\n            open\r\n          {% endif %}\r\n        >\r\n    ```\r\n\r\n## Notes\r\n\r\n- The filter name (`filter_name`) in the `color-filter-helper.js` file must match the data attribute added to the `details` element.\r\n- Ensure that the color names in the `colors` array match exactly with the filter names in your Shopify store."
    },
    {
        "title": "Cookies helper: set of JavaScript functions",
        "tags": ["Shopify Development","JavaScript","Cookies","Shopify Theme Customization","Frontend Development"],
        "description": "# Cookie Management Functions\r\n\r\nThis document provides a set of JavaScript functions for managing cookies in a web application. These functions facilitate the creation, retrieval, updating, and checking of cookies.\r\n\r\n## Functionality\r\n\r\n### 1. `createCookie`\r\n\r\nCreates a cookie with the specified name, value, and optional expiration days. Additionally, it redirects to the specified URL.\r\n\r\n**Usage:**\r\n\r\n```javascript\r\ncreateCookie(name, value, days, url);\r\n```\r\n\r\n**Parameters:**\r\n- `name`: The name of the cookie.\r\n- `value`: The value of the cookie.\r\n- `days`: Optional. The number of days until the cookie expires.\r\n- `url`: Optional. The URL to redirect to after creating the cookie.\r\n\r\n### 2. `getCookie`\r\n\r\nRetrieves the value of a cookie with the given name.\r\n\r\n**Usage:**\r\n\r\n```javascript\r\nvar cookieValue = getCookie(name);\r\n```\r\n\r\n**Parameters:**\r\n- `name`: The name of the cookie.\r\n\r\n### 3. `updateCookie`\r\n\r\nUpdates the value of a cookie by deleting the existing one and creating a new cookie with the updated value.\r\n\r\n**Usage:**\r\n\r\n```javascript\r\nupdateCookie(name, value, days);\r\n```\r\n\r\n**Parameters:**\r\n- `name`: The name of the cookie.\r\n- `value`: The new value for the cookie.\r\n- `days`: Optional. The number of days until the cookie expires.\r\n\r\n### 4. `checkCookie`\r\n\r\nChecks if a cookie with the specified name exists and has the provided value.\r\n\r\n**Usage:**\r\n\r\n```javascript\r\nvar isCookieValid = checkCookie(name, value);\r\n```\r\n\r\n**Parameters:**\r\n- `name`: The name of the cookie.\r\n- `value`: The expected value of the cookie.\r\n\r\n## Implementation\r\n\r\nAdd the following JavaScript code to your project. You should place this code in a file named `cookies-helper.js` in your assets folder.\r\n\r\n```javascript\r\n\/\/ Creates a cookie\r\nfunction createCookie(name, value, days, url) {\r\n  var expires;\r\n  if (days) {\r\n    var date = new Date();\r\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\r\n    expires = \"; expires=\" + date.toGMTString();\r\n  }\r\n  else {\r\n    expires = \"\";\r\n  }\r\n  document.cookie = name + \"=\" + value + expires + \"; path=\/\";\r\n\r\n  \/\/ Redirect to the specified URL\r\n  if (url) {\r\n    window.location = url;\r\n  }\r\n}\r\n\r\n\/\/ Retrieves the value of a cookie\r\nfunction getCookie(name) {\r\n  var nameEQ = name + \"=\";\r\n  var ca = document.cookie.split(';');\r\n  for(var i = 0; i < ca.length; i++) {\r\n    var c = ca[i];\r\n    while (c.charAt(0) == ' ') c = c.substring(1, c.length);\r\n    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\r\n  }\r\n  return \"\";\r\n}\r\n\r\n\/\/ Updates the value of a cookie\r\nfunction updateCookie(name, value, days) {\r\n  \/\/ Delete the existing cookie\r\n  document.cookie = name + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=\/;\";\r\n\r\n  \/\/ Create a new cookie with the updated value\r\n  var expires;\r\n  if (days) {\r\n    var date = new Date();\r\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\r\n    expires = \"; expires=\" + date.toGMTString();\r\n  }\r\n  else {\r\n    expires = \"\";\r\n  }\r\n  document.cookie = name + \"=\" + value + expires + \"; path=\/\";\r\n}\r\n\r\n\/\/ Checks if a cookie with the specified name and value exists\r\nfunction checkCookie(name, value) {\r\n  var cookie = getCookie(name);\r\n  if (cookie == value) {\r\n    \/\/ Cookie exists with the specified value\r\n    return true;\r\n  }\r\n  else {\r\n    \/\/ Cookie does not exist or has a different value\r\n    return false;\r\n  }\r\n}\r\n```\r\n\r\n## Example Usage\r\n\r\n```javascript\r\ncreateCookie(\"postalePopUp\", \"true\", 3, \"\/\");\r\nvar username = getCookie('postalePopUp');\r\n```\r\n\r\n## Notes\r\n\r\n- **URL Redirection**: If you want to redirect to a different URL after creating a cookie, provide the `url` parameter in the `createCookie` function.\r\n- **Cookie Expiration**: If the `days` parameter is not provided, the cookie will be a session cookie and will expire when the browser is closed."
    },
    {
        "title": "Cookie-Based Popup Display for Shopify",
        "tags": ["Shopify Development","JavaScript","CSS","Cookies","Utilities","Shopify Theme Customization","Frontend Development"],
        "description": "# Cookie-Based Popup Display\r\n\r\nThis guide explains how to display a pop-up on your Shopify store only if a specific cookie exists and its value is set to `true`.\r\n\r\n## Usage\r\n\r\nTo display the pop-up based on a cookie, use the following JavaScript code:\r\n\r\n```javascript\r\nif (checkCookie(\"cookiename\", \"true\")) {\r\n    \/\/ Show the popup\r\n    document.getElementById(\"popup\").style.display = \"block\";\r\n}\r\n```\r\n\r\n## Implementation Steps\r\n\r\n### 1. Add HTML for the Popup\r\n\r\nIn your `popup.liquid` file, add the following HTML:\r\n\r\n```html\r\n<!-- HTML for the popup -->\r\n<div id=\"popup\">\r\n  <div id=\"popup-content\">\r\n    <h1>Postale<\/h1>\r\n    <button onclick=\"closePopup()\">Close<\/button>\r\n    <button onclick=\"closePopup()\" id=\"close-button\">X<\/button>\r\n  <\/div>\r\n<\/div>\r\n```\r\n\r\n### 2. Add JavaScript for Popup Functionality\r\n\r\nBelow the HTML, add the following JavaScript:\r\n\r\n```html\r\n<!-- JavaScript for the popup -->\r\n<script>\r\n  \/\/ Check if the cookie exists\r\n  if (checkCookie(\"postalePopUp\", \"true\")) {\r\n    \/\/ Show the popup\r\n    document.getElementById(\"popup\").style.display = \"block\";\r\n  }\r\n\r\n  function closePopup() {\r\n    \/\/ Hide the popup\r\n    document.getElementById(\"popup\").style.display = \"none\";\r\n    updateCookie(\"postalePopUp\", \"false\", 3);\r\n  }\r\n<\/script>\r\n```\r\n\r\n### 3. Add CSS for Popup Styling\r\n\r\nInclude the following CSS to style the pop-up:\r\n\r\n```html\r\n<style>\r\n  #popup {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(0,0,0,0.5);\r\n    display: none;\r\n    z-index: 999;\r\n  }\r\n  \r\n  #popup-content {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    background-color: white;\r\n    padding: 50px;\r\n    text-align: center;\r\n  }\r\n  \r\n  #popup-content h1 {\r\n    font-size: 36px;\r\n  }\r\n  \r\n  #close-button {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n    cursor: pointer;\r\n  }\r\n<\/style>\r\n```\r\n\r\n### 4. Add Schema and Liquid Tags\r\n\r\nInclude the following Liquid tags in your `popup.liquid` file:\r\n\r\n```liquid\r\n{% schema %}\r\n  {\r\n    \"name\": \"Postale popup\",\r\n    \"tag\": \"section\",\r\n    \"settings\": [],\r\n    \"presets\": [\r\n      {\r\n        \"name\": \"Postale popup\"\r\n      }\r\n    ]\r\n  }\r\n{% endschema %}\r\n\r\n{% stylesheet %}\r\n{% endstylesheet %}\r\n\r\n{% javascript %}\r\n{% endjavascript %}\r\n```\r\n\r\n## Notes\r\n\r\n- **Cookie Check Function**: Ensure you have a `checkCookie` function defined in your theme. This function should return `true` if the cookie exists and its value matches the specified value.\r\n- **Update Cookie Function**: The `updateCookie` function should be defined to manage cookie values. It updates the cookie value and expiry.\r\n\r\n"
    },
    {
        "title": "Responsive REM Units Based on Design Reference",
        "tags": ["CSS","Responsive Design","Frontend Development","Design Implementation"],
        "description": "# Responsive REM Units Based on Design Reference\r\n\r\nThis guide explains how to use `rem` units in CSS based on a design reference. This approach ensures that your design scales appropriately across different screen sizes by using responsive font sizes and spacing.\r\n\r\n## Overview\r\n\r\nThe following CSS setup allows you to use `rem` units for styling by referencing a standard design width, such as 1440px for desktop and 390px for mobile. This method ensures consistency with the design across various devices.\r\n\r\n## Implementation\r\n\r\n### 1. Update `font-size` on `html`\r\n\r\nIn your `theme.liquid` file, locate the `html` selector with a `font-size` declaration. Replace it with the following code:\r\n\r\n```css\r\nhtml {\r\n    font-size: calc(1 * 62.5%);\r\n    scroll-behavior: smooth;\r\n}\r\n@media only screen and (max-width: 1440px) and (min-width: 850px) { \r\n    html {\r\n        font-size: calc(10 * 100vw \/ 1440);\r\n    }\r\n}\r\n@media only screen and (max-width: 849px) { \r\n    html {\r\n        font-size: calc(10 * 100vw \/ 390);\r\n    }\r\n}\r\n```\r\n\r\n### Explanation\r\n\r\n- **Base Font Size**: `font-size: calc(1 * 62.5%);`\r\n  - This sets a base font size of `10px` (since `62.5%` of the default `16px` browser font size is `10px`). This makes it easier to use `rem` units based on a `10px` base for calculations.\r\n\r\n- **Desktop Responsive Font Size**: `@media only screen and (max-width: 1440px) and (min-width: 850px)`\r\n  - For screens between `850px` and `1440px`, the `font-size` is calculated based on the viewport width (`100vw`). The formula `calc(10 * 100vw \/ 1440)` adjusts the font size relative to the width of the viewport, ensuring it scales properly.\r\n\r\n- **Mobile Responsive Font Size**: `@media only screen and (max-width: 849px)`\r\n  - For screens narrower than `850px`, the `font-size` is calculated using the viewport width (`100vw`) with a formula adjusted for mobile screens: `calc(10 * 100vw \/ 390)`. This allows the font size to scale appropriately for smaller devices.\r\n\r\n### 2. Using `rem` Units in CSS\r\n\r\nWith the updated `html` font size, you can now use `rem` units in your CSS to match design specifications. For example, if the design specifies:\r\n\r\n- Header font size: `25px`\r\n- Padding: `20px 10px`\r\n\r\nYou can use the following CSS:\r\n\r\n```css\r\n.header {\r\n   font-size: 2.5rem;  \/* 25px \/ 10px base size = 2.5 *\/\r\n   padding: 2rem 1rem; \/* 20px \/ 10px base size = 2, 10px \/ 10px base size = 1 *\/\r\n}\r\n```\r\n\r\n### Notes\r\n\r\n- **Consistency**: This approach ensures that the sizes defined in the design (e.g., font sizes, paddings) are consistently applied across different devices by translating them into `rem` units relative to the viewport width.\r\n- **Responsiveness**: Adjust the `media` queries and the viewport width values (`1440px` and `390px`) as needed to fit your specific design requirements."
    },
    {
        "title": "Creating and initializing a Shopify Checkout extensibility app",
        "tags": ["Shopify Development","JavaScript","Checkout UI Extension","Utilities","Backend Development"],
        "description": "# Shopify Checkout Extensibility App Guide\r\n\r\nThis guide explains how to create and initialize a Shopify checkout extensibility app. It covers the steps for setting up the app, generating extensions, and deploying your customizations.\r\n\r\n## Prerequisites\r\n\r\n- [Node.js](https:\/\/nodejs.org\/) installed\r\n- Shopify CLI installed\r\n- A Shopify partner account\r\n\r\n## Steps to Initialize the Checkout Extensibility App\r\n\r\n### 1. Create a Folder and Open it in VSCode\r\n\r\nCreate a folder where you want your app files to be stored and open it in your Visual Studio Code editor.\r\n\r\n```bash\r\nmkdir your-app-folder\r\ncd your-app-folder\r\ncode .\r\n```\r\n\r\n### 2. Initialize the App\r\n\r\nIn your terminal, run the following command to initialize your Shopify app:\r\n\r\n```bash\r\nnpm init @shopify\/app@latest\r\n```\r\n\r\n### 3. Name Your App and Choose the Type\r\n\r\n- When prompted, give your app a name.\r\n- Choose **Build an extension-only app** as the type.\r\n\r\n### 4. Navigate to the App Directory\r\n\r\nOnce the app is created, move into the app directory:\r\n\r\n```bash\r\ncd your-app-name\r\n```\r\n\r\n### 5. Generate Your First Extension\r\n\r\nRun the following command to generate your first extension:\r\n\r\n```bash\r\nshopify app generate extension\r\n```\r\n\r\n### 6. Log in and Create a New App\r\n\r\n- Log in to your Shopify partner account.\r\n- Select **Yes** to create it as a new app.\r\n\r\n### 7. Select the Extension Type\r\n\r\n- Choose **Checkout UI** as the extension type.\r\n- Provide a name for your extension.\r\n\r\n### 8. Choose JavaScript React\r\n\r\nWhen prompted, select **JavaScript React** as your framework.\r\n\r\n### 9. Customize, Build, and Deploy\r\n\r\nYou can now customize your extension. After making changes, you can build the app with:\r\n\r\n```bash\r\nshopify app build\r\n```\r\n\r\nAnd deploy it with:\r\n\r\n```bash\r\nshopify app deploy\r\n```\r\n\r\n### 10. (Optional) Link the App to a Test Store\r\n\r\nTo test your changes, go to your Shopify admin dashboard and link your app to a test store. This allows you to validate your deploys in real-time."
    }
]